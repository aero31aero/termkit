diff --git a/src/qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderTreeAsText.cpp b/src/qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderTreeAsText.cpp
index 9709838..88c4972 100644
--- a/src/qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderTreeAsText.cpp
+++ b/src/qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderTreeAsText.cpp
@@ -244,35 +244,7 @@ void RenderTreeAsText::writeRenderObject(TextStream& ts, const RenderObject& o,
         }
     }
 
-    bool adjustForTableCells = o.containingBlock()->isTableCell();
-
-    IntRect r;
-    if (o.isText()) {
-        // FIXME: Would be better to dump the bounding box x and y rather than the first run's x and y, but that would involve updating
-        // many test results.
-        const RenderText& text = *toRenderText(&o);
-        IntRect linesBox = text.linesBoundingBox();
-        r = IntRect(text.firstRunX(), text.firstRunY(), linesBox.width(), linesBox.height());
-        if (adjustForTableCells && !text.firstTextBox())
-            adjustForTableCells = false;
-    } else if (o.isRenderInline()) {
-        // FIXME: Would be better not to just dump 0, 0 as the x and y here.
-        const RenderInline& inlineFlow = *toRenderInline(&o);
-        r = IntRect(0, 0, inlineFlow.linesBoundingBox().width(), inlineFlow.linesBoundingBox().height());
-        adjustForTableCells = false;
-    } else if (o.isTableCell()) {
-        // FIXME: Deliberately dump the "inner" box of table cells, since that is what current results reflect.  We'd like
-        // to clean up the results to dump both the outer box and the intrinsic padding so that both bits of information are
-        // captured by the results.
-        const RenderTableCell& cell = *toRenderTableCell(&o);
-        r = IntRect(cell.x(), cell.y() + cell.intrinsicPaddingBefore(), cell.width(), cell.height() - cell.intrinsicPaddingBefore() - cell.intrinsicPaddingAfter());
-    } else if (o.isBox())
-        r = toRenderBox(&o)->frameRect();
-
-    // FIXME: Temporary in order to ensure compatibility with existing layout test results.
-    if (adjustForTableCells)
-        r.move(0, -toRenderTableCell(o.containingBlock())->intrinsicPaddingBefore());
-
+    IntRect r = const_cast<RenderObject&>(o).absoluteClippedOverflowRect();
     ts << " " << r;
 
     if (!(o.isText() && !o.isBR())) {
@@ -567,23 +539,9 @@ void write(TextStream& ts, const RenderObject& o, int indent, RenderAsTextBehavi
 
     for (RenderObject* child = o.firstChild(); child; child = child->nextSibling()) {
         if (child->hasLayer())
-            continue;
+            ts << "haslayer";
         write(ts, *child, indent + 1, behavior);
     }
-
-    if (o.isWidget()) {
-        Widget* widget = toRenderWidget(&o)->widget();
-        if (widget && widget->isFrameView()) {
-            FrameView* view = static_cast<FrameView*>(widget);
-            RenderView* root = view->frame()->contentRenderer();
-            if (root) {
-                view->layout();
-                RenderLayer* l = root->layer();
-                if (l)
-                    writeLayers(ts, l, l, IntRect(l->x(), l->y(), l->width(), l->height()), indent + 1, behavior);
-            }
-        }
-    }
 }
 
 enum LayerPaintPhase {
@@ -671,41 +629,9 @@ static void writeLayers(TextStream& ts, const RenderLayer* rootLayer, RenderLaye
     if (shouldPaint && paintsBackgroundSeparately)
         write(ts, *l, layerBounds, damageRect, clipRectToApply, outlineRect, LayerPaintPhaseBackground, indent, behavior);
 
-    if (negList) {
-        int currIndent = indent;
-        if (behavior & RenderAsTextShowLayerNesting) {
-            writeIndent(ts, indent);
-            ts << " negative z-order list(" << negList->size() << ")\n";
-            ++currIndent;
-        }
-        for (unsigned i = 0; i != negList->size(); ++i)
-            writeLayers(ts, rootLayer, negList->at(i), paintDirtyRect, currIndent, behavior);
-    }
-
     if (shouldPaint)
         write(ts, *l, layerBounds, damageRect, clipRectToApply, outlineRect, paintsBackgroundSeparately ? LayerPaintPhaseForeground : LayerPaintPhaseAll, indent, behavior);
 
-    if (Vector<RenderLayer*>* normalFlowList = l->normalFlowList()) {
-        int currIndent = indent;
-        if (behavior & RenderAsTextShowLayerNesting) {
-            writeIndent(ts, indent);
-            ts << " normal flow list(" << normalFlowList->size() << ")\n";
-            ++currIndent;
-        }
-        for (unsigned i = 0; i != normalFlowList->size(); ++i)
-            writeLayers(ts, rootLayer, normalFlowList->at(i), paintDirtyRect, currIndent, behavior);
-    }
-
-    if (Vector<RenderLayer*>* posList = l->posZOrderList()) {
-        int currIndent = indent;
-        if (behavior & RenderAsTextShowLayerNesting) {
-            writeIndent(ts, indent);
-            ts << " positive z-order list(" << posList->size() << ")\n";
-            ++currIndent;
-        }
-        for (unsigned i = 0; i != posList->size(); ++i)
-            writeLayers(ts, rootLayer, posList->at(i), paintDirtyRect, currIndent, behavior);
-    }
 }
 
 static String nodePosition(Node* node)
diff --git a/src/webpage.cpp b/src/webpage.cpp
index 5dde3c6..1bf7d52 100644
--- a/src/webpage.cpp
+++ b/src/webpage.cpp
@@ -1616,6 +1616,11 @@ QString WebPage::focusedFrameName() const
     return m_customWebPage->currentFrame()->frameName();
 }
 
+QString WebPage::focusedFrameRenderTreeDump() const
+{
+	return m_customWebPage->currentFrame()->renderTreeDump();
+}
+
 static void injectCallbacksObjIntoFrame(QWebFrame *frame, WebpageCallbacks *callbacksObject)
 {
     // Inject object only if it's not already present
diff --git a/src/webpage.h b/src/webpage.h
index df2b83a..3ea7ace 100644
--- a/src/webpage.h
+++ b/src/webpage.h
@@ -79,6 +79,7 @@ class WebPage : public QObject, public QWebFrame::PrintCallback
     Q_PROPERTY(QString frameName READ frameName)
     Q_PROPERTY(int framesCount READ framesCount)
     Q_PROPERTY(QString focusedFrameName READ focusedFrameName)
+	Q_PROPERTY(QString focusedFrameRenderTreeDump READ focusedFrameRenderTreeDump)
 
 public:
     WebPage(QObject *parent, const QUrl &baseUrl = QUrl());
@@ -233,6 +234,13 @@ public:
      * @return Frame
      */
     QString focusedFrameName() const;
+	/**
+	* Returns the currently focused Frame's render tree
+	*
+	* @brief textual dump of the reder tree
+	* @return DUmp of frame render tree
+	*/
+	QString focusedFrameRenderTreeDump() const;
 
 public slots:
     void openUrl(const QString &address, const QVariant &op, const QVariantMap &settings);
